import asyncio
import random
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database import init_db, add_participant, get_all_participants, remove_participant

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = "7908303618:AAGiOBO2H8T4yHeZdtlyRLPrncAmUdaJig4"
CHANNELS = ["@pluggg420_shop", "@pluggg_world"]
MAIN_CHANNEL = "@pluggg420_shop"
TARGET_SUBS = 400
ADMIN_ID = 7509267326

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler()
last_post_msg_id = None
finalized = False

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è /post ---
class PostStates(StatesGroup):
    waiting_photo = State()
    waiting_text = State()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data="join")]
    ])
    await message.answer(
        "üéâ –ü—Ä–∏–º–∏ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –±—É–¥—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞.",
        reply_markup=kb
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /post –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∞–¥–º–∏–Ω–æ–º ---
@dp.message(F.text == "/post")
async def cmd_post_start(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç' –µ—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ:")
    await state.set_state(PostStates.waiting_photo)

@dp.message(F.text.casefold() == "–Ω–µ—Ç", PostStates.waiting_photo)
async def post_no_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=None)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await state.set_state(PostStates.waiting_text)

@dp.message(F.photo, PostStates.waiting_photo)
async def post_with_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await state.set_state(PostStates.waiting_text)

@dp.message(PostStates.waiting_text)
async def post_text_received(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo = data.get("photo")
    text = message.text
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ ({len(get_all_participants())})", callback_data="join")]
    ])

    global last_post_msg_id
    try:
        if photo:
            msg = await bot.send_photo(chat_id=MAIN_CHANNEL, photo=photo, caption=text, reply_markup=kb)
        else:
            msg = await bot.send_message(chat_id=MAIN_CHANNEL, text=text, reply_markup=kb)
        last_post_msg_id = msg.message_id
        await message.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    await state.clear()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def is_subscribed(user_id: int) -> (bool, list):
    missing = []
    for ch in CHANNELS:
        try:
            member = await bot.get_chat_member(chat_id=ch, user_id=user_id)
            if member.status not in ("member", "administrator", "creator"):
                missing.append(ch)
        except Exception:
            missing.append(ch)
    return len(missing) == 0, missing

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ" ---
@dp.callback_query(F.data == "join")
async def callback_join(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or ""
    full_name = callback.from_user.full_name

    subscribed, missing = await is_subscribed(user_id)
    if not subscribed:
        await callback.answer("‚ùó –¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
        # –ï—Å–ª–∏ –±—ã–ª –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö ‚Äî —É–¥–∞–ª–∏–º
        if user_id in get_all_participants():
            remove_participant(user_id)
        return

    if user_id in get_all_participants():
        await callback.answer("‚úÖ –¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å!", show_alert=True)
        return

    add_participant(user_id, full_name, username)
    await callback.answer("‚úÖ –£—á–∞—Å—Ç–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!", show_alert=True)
    await update_post_button()

# --- –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ø–æ—Å—Ç–æ–º —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ---
async def update_post_button():
    global last_post_msg_id
    if last_post_msg_id is None:
        return
    count = len(get_all_participants())
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ ({count})", callback_data="join")]
    ])
    try:
        await bot.edit_message_reply_markup(chat_id=MAIN_CHANNEL, message_id=last_post_msg_id, reply_markup=kb)
    except Exception:
        pass

# --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –æ–±—ä—è–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ ---
async def check_subscribers_job():
    global finalized
    if finalized:
        return
    try:
        chat = await bot.get_chat(MAIN_CHANNEL)
        count = await chat.get_member_count()
        if isinstance(count, int) and count >= TARGET_SUBS:
            finalized = True
            await announce_winners()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")

# --- –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ---
async def announce_winners():
    participants = get_all_participants()
    if len(participants) < 5:
        await bot.send_message(ADMIN_ID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—è—Ç–∏ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç.")
        return

    winners = random.sample(participants, 5)
    prizes = [
        "ü•á 1 –º–µ—Å—Ç–æ ‚Äî –±—Ä–µ–ª–æ–∫",
        "ü•à 2 –º–µ—Å—Ç–æ ‚Äî –±—Ä–µ–ª–æ–∫",
        "ü•â 3 –º–µ—Å—Ç–æ ‚Äî –±—Ä–µ–ª–æ–∫",
        "4 –º–µ—Å—Ç–æ ‚Äî 100 –≥—Ä–Ω",
        "5 –º–µ—Å—Ç–æ ‚Äî 100 –≥—Ä–Ω"
    ]
    text = "<b>üèÜ –ò—Ç–æ–≥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞!</b>\n\n"
    for i, uid in enumerate(winners):
        text += f"{prizes[i]} ‚Äî <a href='tg://user?id={uid}'>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å {i+1}</a>\n"

    await bot.send_message(MAIN_CHANNEL, text)
    for uid in participants:
        try:
            await bot.send_message(uid, text)
        except Exception:
            pass

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    init_db()
    scheduler.add_job(check_subscribers_job, "interval", seconds=30)
    scheduler.start()
    await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())